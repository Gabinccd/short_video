// App.js
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import MainScreen from './screens/MainScreen';
import ProfileScreen from './screens/ProfileScreen';
import { AuthProvider } from './context/AuthContext';

const Stack = createStackNavigator();

export default function App() {
  return (
    <AuthProvider>
      <NavigationContainer>
        <Stack.Navigator screenOptions={{ headerShown: false }}>
          <Stack.Screen name="Main" component={MainScreen} />
          <Stack.Screen name="Profile" component={ProfileScreen} />
        </Stack.Navigator>
      </NavigationContainer>
    </AuthProvider>
  );
}

// context/AuthContext.js
import React, { createContext, useState, useContext } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = async (username, password) => {
    // Logique de connexion avec backend
    try {
      const response = await fetch('https://votre-api.com/login', {
        method: 'POST',
        body: JSON.stringify({ username, password })
      });
      const userData = await response.json();
      await AsyncStorage.setItem('userToken', userData.token);
      setUser(userData);
    } catch (error) {
      console.error('Erreur de connexion', error);
    }
  };

  const logout = async () => {
    await AsyncStorage.removeItem('userToken');
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

// components/VideoPlayer.js
import React, { useRef, useState } from 'react';
import { View, TouchableOpacity, StyleSheet, Dimensions } from 'react-native';
import Video from 'react-native-video';
import IconButton from './IconButton';

const { height, width } = Dimensions.get('window');

const VideoPlayer = ({ video, onLike, onComment, onShare }) => {
  const [paused, setPaused] = useState(false);
  const videoRef = useRef(null);

  const togglePlay = () => setPaused(!paused);

  return (
    <View style={styles.container}>
      <TouchableOpacity onPress={togglePlay} style={styles.videoContainer}>
        <Video
          ref={videoRef}
          source={{ uri: video.uri }}
          style={styles.video}
          resizeMode="cover"
          repeat
          paused={paused}
        />
      </TouchableOpacity>
      
      <View style={styles.actionButtons}>
        <IconButton 
          icon="heart" 
          onPress={() => onLike(video.id)} 
        />
        <IconButton 
          icon="message-circle" 
          onPress={() => onComment(video.id)} 
        />
        <IconButton 
          icon="share" 
          onPress={() => onShare(video)} 
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    height,
    width,
    position: 'relative'
  },
  videoContainer: {
    flex: 1
  },
  video: {
    position: 'absolute',
    top: 0,
    left: 0,
    bottom: 0,
    right: 0
  },
  actionButtons: {
    position: 'absolute',
    bottom: 50,
    right: 20,
    alignItems: 'center'
  }
});

export default VideoPlayer;

// screens/MainScreen.js
import React, { useState, useEffect } from 'react';
import { FlatList, View, StyleSheet } from 'react-native';
import VideoPlayer from '../components/VideoPlayer';
import { fetchVideos } from '../services/videoService';

export default function MainScreen() {
  const [videos, setVideos] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    loadVideos();
  }, []);

  const loadVideos = async () => {
    const fetchedVideos = await fetchVideos();
    setVideos(fetchedVideos);
  };

  const onViewableItemsChanged = React.useRef(({ viewableItems }) => {
    if (viewableItems.length > 0) {
      setCurrentIndex(viewableItems[0].index);
    }
  }).current;

  const handleLike = async (videoId) => {
    // Logique de like
  };

  const handleComment = (videoId) => {
    // Navigation vers écran de commentaires
  };

  const handleShare = (video) => {
    // Logique de partage
  };

  return (
    <View style={styles.container}>
      <FlatList
        data={videos}
        renderItem={({ item, index }) => (
          <VideoPlayer 
            video={item}
            onLike={handleLike}
            onComment={handleComment}
            onShare={handleShare}
            isFocused={index === currentIndex}
          />
        )}
        keyExtractor={item => item.id}
        snapToAlignment="start"
        decelerationRate="fast"
        snapToInterval={Dimensions.get('window').height}
        vertical
        pagingEnabled
        onViewableItemsChanged={onViewableItemsChanged}
        viewabilityConfig={{ itemVisiblePercentThreshold: 50 }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black'
  }
});

// services/videoService.js
const API_URL = 'https://votre-api.com/videos';

export const fetchVideos = async () => {
  try {
    const response = await fetch(API_URL);
    return await response.json();
  } catch (error) {
    console.error('Erreur de chargement des vidéos', error);
    return [];
  }
};
